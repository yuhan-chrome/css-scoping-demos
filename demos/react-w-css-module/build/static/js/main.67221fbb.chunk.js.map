{"version":3,"sources":["accordion-demo.module.css","components/accordion-section.module.css","components/accordion.module.css","components/textbox.module.css","components/accordion.js","components/accordion-section.js","components/textbox.js","accordion-demo.js","serviceWorker.js","index.js"],"names":["module","exports","Accordion","props","children","this","className","styles","accordion","Component","AccordionSection","toggle","setState","state","isExpanded","bind","title","includeAccordionContent","trigger","onClick","aria-expanded","icon","id","panel","hidden","content","defaultProps","Textbox","style","AccordionDemo","color","backgroundColor","border","width","padding","demoBlock","demo","description","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67221fbb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"accordion-demo_title__2bPrw\",\"demo\":\"accordion-demo_demo__2h4AZ\",\"description\":\"accordion-demo_description__29Ho8\",\"content\":\"accordion-demo_content__1RUQm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"trigger\":\"accordion-section_trigger__ZYdfQ\",\"panel\":\"accordion-section_panel__DLcyy\",\"button\":\"accordion-section_button__hOFRM\",\"title\":\"accordion-section_title__xSUNM\",\"icon\":\"accordion-section_icon__3ZI_a\",\"content\":\"accordion-section_content__3qh35\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accordion\":\"accordion_accordion__2T1zJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"textbox_content__1N3ZR\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './accordion.module.css';\n\nclass Accordion extends Component {\n    static propTypes = {\n        children: PropTypes.instanceOf(Object).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const {\n            children,\n        } = this.props;\n\n        return (\n            <div className={styles.accordion}>\n                {children}\n            </div>\n            );\n    }\n}\n\nexport default Accordion;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './accordion-section.module.css'\n\nclass AccordionSection extends Component {\n    static propTypes = {\n        children: PropTypes.instanceOf(Object).isRequired,\n        includeAccordionContent: PropTypes.bool,\n        className: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        isExpanded: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        includeAccordionContent: true,\n        isExpanded: true,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {isExpanded: props.isExpanded}\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle = () => {\n        this.setState(state => ({ isExpanded: !state.isExpanded}));\n    }\n\n    render() {\n        const {\n            props: { title, includeAccordionContent, children, className },\n            state: { isExpanded },\n        } = this;\n\n        return (\n            <div className={className}>\n                <button className={styles.trigger} onClick={this.toggle}  aria-expanded={isExpanded}>\n                    <span className={styles.title}>\n                        {title}\n                        <span className={styles.icon}></span>\n                    </span>\n                </button>\n                <div id=\"sect\" className={styles.panel} hidden={!isExpanded}>\n                    {includeAccordionContent? <div className={styles.content}> Accordion Content</div> : null}\n                    <br />\n                    {children}\n                </div>\n            </div>);\n    }\n}\n\nexport default AccordionSection;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './textbox.module.css';\n\nclass Textbox extends Component {\n    static propTypes = {\n        style: PropTypes.object,\n        children: PropTypes.any,\n    };\n\n    render() {\n        const {\n            style,\n            children,\n        } = this.props;\n\n        return (\n            <div style={style} className={styles.content}>\n                {children}\n            </div>\n        );\n    }\n}\n\nexport default Textbox;\n","import React from 'react';\nimport styles from './accordion-demo.module.css';\nimport Accordion from \"./components/accordion\";\nimport AccordionSection from \"./components/accordion-section\";\nimport Textbox from \"./components/textbox\";\n\n\nfunction AccordionDemo() {\n  return (\n      <div id=\"accordion-demo\">\n          <h2 className={styles.title}>React w/ CSS Module - Accordion Demo</h2>\n          <section className={styles.content}>\n              <p>\n                  This demo is build with React along with CSS Module. The main purpose is to explorer CSS scoping capabilities of CSS in JS techniques.\n                  It uses an Accordion component which uses generic css class selector\n                  for, <code>.title</code>, <code>.content</code>. But they don't interfere\n                  with same selectors on the page.\n              </p>\n\n              <pre>\n               Ex: <br/>\n                  &nbsp;&nbsp; page style                                     <span style={{color:\"#3c4043\"}}>.content</span> (color: #3c4043;) <br/>\n                  &nbsp;&nbsp; accordion style                                <span style={{color:\"red\"}}>.content</span> (color: red;) <br/>\n                  &nbsp;&nbsp; embedded component &lt;textbox&gt; style             <span style={{color:\"darkblue\"}}>.content</span> (color: darkblue;)\n              </pre>\n\n              Styles in component are encapsulated, they don't leak out onto the page and don't penetrate into the inner\n              components.\n              <br/> <br/>\n              The page is can only style Accordion if it exposes the styles to be stylable.\n              It demonstrates the behavior with the following use cases:\n              <ol>\n                  <li>Accordion styles don't leak out into the page, don't bleed into inner components.</li>\n                  <li>Page can style components's content.</li>\n                  <li>Page styles its content and insert it into Accordion.</li>\n                  <li>Component styles can be combined into single stylesheet.</li>\n                  <li>Content and Styles are separate.</li>\n              </ol>\n              <p>The demo uses the two following CSS properties in the Accordion header to highlight the behavior:</p>\n              <ul>\n                  <li>background-color</li>\n                  <li>color</li>\n              </ul>\n          </section>\n\n          <h4>Demo:</h4>\n          <div>\n              <ul>\n                  <li>Accordion content is directly added by Accordion component <br/>\n                      <div\n                          style={{color: 'red',\n                                  backgroundColor: 'lightblue',\n                                  border: '1px solid red',\n                                  width: '9em',\n                                  padding: '.5em'}}> Accordion content\n                      </div>\n                  </li>\n                  <li>Page content is added by the page. <br/>\n                      <Textbox>Page content</Textbox>\n                  </li>\n              </ul>\n          </div>\n\n          <div className={styles.demoBlock}>\n              <div className={styles.demo}>\n                  <Accordion>\n                      <AccordionSection title=\"Accordion styles don't leak out into the page, don't bleed into inner components\" isExpanded={true}>\n                          <Textbox> Page content</Textbox>\n                          <div className={styles.description}> Page,  Accordion, and Textbox\n                              all use <code>.content</code> class selector. <br/> <br/>Their styles don't interfere. Accordion\n                              styles are encapsulated inside the component.\n                          </div>\n                      </AccordionSection>\n                      <AccordionSection className=\"stylingAccordion\" title=\"Page styles component's content\">\n                          <div className={styles.description}>Page can create a style with higher\n                              specificity and style Accordion content. text color is <span\n                                  style={{color:'green'}}>green</span></div>\n                      </AccordionSection>\n                      <AccordionSection title=\"Page styles its content inserted into Accordion\" includeAccordionContent={false}>\n                          <Textbox style={{backgroundColor: 'lightgray'}}>\n                              <span style={{color: 'green'}}> Page content </span>\n                          </Textbox>\n                          <div className={styles.description}>Page content is inserted in Accordion but the\n                              page has full control in styling its appearance. <br/> <span\n                                  style={{color:'green'}}>color</span> and <span\n                                  style={{backgroundColor: 'lightgray'}}>background-color</span> changed.\n                          </div>\n                      </AccordionSection>\n                      <AccordionSection title=\"Component styles can be combined into single stylesheet\" includeAccordionContent={false}>\n                          <div className={styles.description}>Yes. Component styles are scoped to component\n                              where they were created. <br/> It's achieved through a compile step. <br/><br/>\n\n                              the original HTML and style <br/>\n                                HTML:    &lt;section class=\"content\"&gt; <br/>\n                                CSS:     .content &#123;...&#125;\n\n                                <br/> <br/>\n                              <span style={{color:'#e8bf6a'}}>&lt;section </span><span style={{color:'gray'}}> class</span><span\n                                  style={{color:'#a5c261'}}>=\"accordion-demo_content__1RUQm\"</span><span\n                                  style={{color:'#e8bf6a'}}>&gt;</span>\n                              <br/>\n                              <br/>\n                              <span\n                                  style={{color:'#a5c261'}}>.accordion-demo_content__1RUQm &#123; color:#3c4043; &#125;</span>\n                          </div>\n                      </AccordionSection>\n                      <AccordionSection title=\"Content and Style are separate\" includeAccordionContent={true}>\n                          <div className=\"description\">Vue supports separation of content and style\n                              by enabling the use of &lt;styles&gt; tag for CSS and &lt;template&gt; tag for HTML.\n                          </div>\n                      </AccordionSection>\n                  </Accordion>\n              </div>\n          </div>\n\n          <br/><br/><br/>\n      </div>\n  );\n}\nexport default AccordionDemo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AccordionDemo from './accordion-demo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AccordionDemo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}